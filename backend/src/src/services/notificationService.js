// Service centralisÃ© de notifications Socket.io

/**
 * Envoi dâ€™une notification (broadcast global)
 * @param {Express} app - Lâ€™application Express
 * @param {string} event - Nom de lâ€™Ã©vÃ©nement (ex: "DATASET_CREATED")
 * @param {object} payload - DonnÃ©es envoyÃ©es aux clients
 */
export function sendNotification(app, event, payload) {
  const io = app.get("io");
  if (io) {
    io.emit(event, payload);
    console.log(`ğŸ“¢ Notification envoyÃ©e: ${event}`, payload);
  }
}

/**
 * Envoi dâ€™une notification ciblÃ©e Ã  un utilisateur prÃ©cis
 * @param {Express} app - Lâ€™application Express
 * @param {string|number} userId - Identifiant utilisateur (liÃ© au socket)
 * @param {string} event - Nom de lâ€™Ã©vÃ©nement
 * @param {object} payload - DonnÃ©es envoyÃ©es
 */
export function sendNotificationToUser(app, userId, event, payload) {
  const io = app.get("io");
  if (io) {
    io.to(`user_${userId}`).emit(event, payload);
    console.log(`ğŸ“¢ Notification envoyÃ©e Ã  lâ€™utilisateur ${userId}: ${event}`, payload);
  }
}

/**
 * Attacher un utilisateur Ã  une "room" socket (Ã  appeler cÃ´tÃ© backend quand lâ€™utilisateur se connecte)
 * @param {Socket} socket - Socket.io client
 * @param {string|number} userId - Identifiant utilisateur
 */
export function registerUserSocket(socket, userId) {
  socket.join(`user_${userId}`);
  console.log(`âœ… Socket ${socket.id} enregistrÃ© pour lâ€™utilisateur ${userId}`);
}
